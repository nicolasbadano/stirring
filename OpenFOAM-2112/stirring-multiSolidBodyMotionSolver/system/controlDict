/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  8
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      controlDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

application     interMixingFoam;

startFrom       latestTime;

startTime       0;

stopAt          endTime;

endTime         2;

deltaT          0.0001;

writeControl    adjustableRunTime;

writeInterval   0.01;

purgeWrite      5;

writeFormat     binary;

writePrecision  12;

writeCompression off;

timeFormat      general;

timePrecision   12;

runTimeModifiable yes;

adjustTimeStep  on;

maxCo           0.9;
maxAlphaCo      0.9;

maxDeltaT       0.001;

libs            ();

functions
{
    surfaceSampling
    {
        type            surfaces;
        libs            (sampling);
        writeControl    runTime;
        writeInterval   0.005;

        interpolationScheme cellPointWallModified;

        surfaceFormat ensight;

        formatOptions
        {
            vtp
            {
                format binary;
            }
        }

        // Fields to be sampled
        fields
        (
            U
            k
            omega
            nut
            alpha.water
            alpha.sugar
            alphas
            p_rgh
        );

        surfaces
        {
            freeSurface
            {
                type            isoSurface;
                isoField        alpha.water;
                isoValue        0.5;
                interpolate     true;
            }
            sugarSurface
            {
                type            isoSurface;
                isoField        alpha.sugar;
                isoValue        0.05;
                interpolate     true;
            }
            yNormalMinus0015
            {
                type        cuttingPlane;
                planeType   pointAndNormal;
                pointAndNormalDict {
                    point       (0 -0.015 0);
                    normal      (0 1 0);
                }
                interpolate true;
            }
            yNormalPlus0000
            {
                type        cuttingPlane;
                planeType   pointAndNormal;
                pointAndNormalDict {
                    point       (0 0 0);
                    normal      (0 1 0);
                }
                interpolate true;
            }
            yNormalPlus0015
            {
                type        cuttingPlane;
                planeType   pointAndNormal;
                pointAndNormalDict {
                    point       (0 0.015 0);
                    normal      (0 1 0);
                }
                interpolate true;
            }
            yNormalPlus0030
            {
                type        cuttingPlane;
                planeType   pointAndNormal;
                pointAndNormalDict {
                    point       (0 0.03 0);
                    normal      (0 1 0);
                }
                interpolate true;
            }
            xNormal0
            {
                type        cuttingPlane;
                planeType   pointAndNormal;
                pointAndNormalDict {
                    point       (0 0 0);
                    normal      (1 0 0);
                }
                interpolate true;
            }
            zNormal0
            {
                type        cuttingPlane;
                planeType   pointAndNormal;
                pointAndNormalDict {
                    point       (0 0 0);
                    normal      (0 0 1);
                }
                interpolate true;
            }
            teaspoon
            {
                type            patch;
                patches         (teaspoon);
                interpolate     true;
            }
        }
    }

}

// ************************************************************************* //
